name: build

on:
  push:
    branches:
      - master
      - stable
    tags:
      - "v*"
      - "!*-fdroid"
      - "!*-armv7a"
  pull_request:
    paths-ignore:
      - "apps/ios"
      - "apps/multiplatform"
      - "blog"
      - "docs"
      - "fastlane"
      - "images"
      - "packages"
      - "website"
      - "README.md"
      - "PRIVACY.md"

# This workflow uses custom actions (prepare-build and prepare-release) defined in:
# 
# .github/actions/
# ├── prepare-build
# │   └── action.yml
# └── prepare-release
#     └── action.yml

# Important!
# Do not use always(), it makes build unskippable.
# See: https://github.com/actions/runner/issues/1846#issuecomment-1246102753

jobs:

# =============================
#       Global variables
# =============================

# That is the only and less hacky way to setup global variables
# to use in strategy matrix (env:/YAML anchors doesn't work).
# See: https://github.com/orgs/community/discussions/56787#discussioncomment-6041789
#      https://github.com/actions/runner/issues/1182
#      https://stackoverflow.com/a/77549656

  variables:
    runs-on: ubuntu-latest
    outputs:
      GHC_VER: 9.6.3
      JAVA_VER: 17
    steps:
      - name: Dummy job when we have just simple variables
        if: false
        run: echo

# =============================
#       Create release
# =============================

# Create release, but only if it's triggered by tag push.
# On pull requests/commits push, this job will always complete.

  maybe-release:
    runs-on: ubuntu-latest
    steps:
      - name: Clone project
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/checkout@v3

      - name: Build changelog
        id: build_changelog
        if: startsWith(github.ref, 'refs/tags/v')
        uses: simplex-chat/release-changelog-builder-action@v5
        with:
          configuration: .github/changelog_conf.json
          failOnError: true
          ignorePreReleases: true
          commitMode: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: simplex-chat/action-gh-release@v2
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          prerelease: true
          files: |
            LICENSE
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# =========================
#        Linux Build
# =========================

  build-linux:
    name: "ubuntu-${{ matrix.os }} (CLI,Desktop), GHC: ${{ matrix.ghc }}"
    needs: [maybe-release, variables]
    runs-on: ubuntu-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 22.04
            ghc: "8.10.7"
            should_run: ${{ !(github.ref == 'refs/heads/stable' || startsWith(github.ref, 'refs/tags/v')) }}
          - os: 22.04
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            cli_asset_name: simplex-chat-ubuntu-22_04-x86-64
            desktop_asset_name: simplex-desktop-ubuntu-22_04-x86_64.deb
            should_run: true
          - os: 24.04
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            cli_asset_name: simplex-chat-ubuntu-24_04-x86-64
            desktop_asset_name: simplex-desktop-ubuntu-24_04-x86_64.deb
            should_run: true
    steps:
      - name: Checkout Code
        if: matrix.should_run == true
        uses: actions/checkout@v3

      - name: Setup swap
        if: matrix.ghc == '8.10.7' && matrix.should_run == true
        uses: ./.github/actions/swap
        with:
          swap-size-gb: 30

      # Otherwise we run out of disk space with Docker build
      - name: Free disk space
        if: matrix.should_run == true
        shell: bash
        run: ./scripts/ci/linux_util_free_space.sh

      - name: Restore cached build
        if: matrix.should_run == true
        uses: actions/cache@v4
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ubuntu-${{ matrix.os }}-ghc${{ matrix.ghc }}-${{ hashFiles('cabal.project', 'simplex-chat.cabal') }}

      - name: Set up Docker Buildx
        if: matrix.should_run == true
        uses: simplex-chat/docker-setup-buildx-action@v3

      - name: Build and cache Docker image
        if: matrix.should_run == true
        uses: simplex-chat/docker-build-push-action@v6
        with:
          context: .
          load: true
          file: Dockerfile.build
          tags: build/${{ matrix.os }}:latest
          build-args: |
            TAG=${{ matrix.os }}
            GHC=${{ matrix.ghc }}

      # Docker needs these flags for AppImage build:
      # --device /dev/fuse
      # --cap-add SYS_ADMIN
      # --security-opt apparmor:unconfined
      - name: Start container
        if: matrix.should_run == true
        shell: bash
        run: |
          docker run -t -d \
            --device /dev/fuse \
            --cap-add SYS_ADMIN \
            --security-opt apparmor:unconfined \
            --name builder \
            -v ~/.cabal:/root/.cabal \
            -v /home/runner/work/_temp:/home/runner/work/_temp \
            -v ${{ github.workspace }}:/project \
            build/${{ matrix.os }}:latest

      - name: Prepare cabal.project.local
        if: matrix.should_run == true
        shell: bash
        run: |
          echo "ignore-project: False"    >> cabal.project.local
          echo "package direct-sqlcipher" >> cabal.project.local
          echo "    flags: +openssl"      >> cabal.project.local

      # chmod/git commands are used to workaround permission issues when cache is restored
      - name: Build CLI
        if: matrix.should_run == true
        shell: docker exec -t builder sh -eu {0}
        run: |
          chmod -R 777 dist-newstyle ~/.cabal && git config --global --add safe.directory '*'
          cabal clean
          cabal update
          cabal build -j --enable-tests
          mkdir -p /out
          for i in simplex-chat simplex-chat-test; do
            bin=$(find /project/dist-newstyle -name "$i" -type f -executable)
            chmod +x "$bin"
            mv "$bin" /out/
          done
          strip /out/simplex-chat

      - name: Copy tests from container
        if: matrix.should_run == true
        shell: bash
        run: |
          docker cp builder:/out/simplex-chat-test .

      - name: Copy CLI from container and prepare it
        id: linux_cli_prepare
        if: startsWith(github.ref, 'refs/tags/v') && matrix.should_run == true
        shell: bash
        run: |
          docker cp builder:/out/simplex-chat ./${{ matrix.cli_asset_name }}
          path="${{ github.workspace }}/${{ matrix.cli_asset_name }}"
          echo "bin_path=$path" >> $GITHUB_OUTPUT
          echo "bin_hash=$(echo SHA2-256\(${{ matrix.cli_asset_name }}\)= $(openssl sha256 $path | cut -d' ' -f 2))" >> $GITHUB_OUTPUT

      - name: Upload CLI
        if: startsWith(github.ref, 'refs/tags/v') && matrix.should_run == true
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.linux_cli_prepare.outputs.bin_path }}
          bin_name: ${{ matrix.cli_asset_name }}
          bin_hash: ${{ steps.linux_cli_prepare.outputs.bin_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Desktop
        if: startsWith(github.ref, 'refs/tags/v') && matrix.should_run == true
        shell: docker exec -t builder sh -eu {0}
        run: |
          scripts/desktop/build-lib-linux.sh
          cd apps/multiplatform
          ./gradlew packageDeb

          # Workaround for skiko library
          #
          # Compose Multiplatform depends on skiko library, that
          # handles all of the window managment and graphics drawing.
          #
          # This skiko library comes with two jar's:
          # - platform-agnostic "skiko-awt"
          # - and platform-specific "skiko-awt-runtime"
          #
          # In case of Linux, second jar is called "skiko-awt-runtime-linux-x64".
          # Essentially, this jar has the Linux .so library called "libskiko-linux-x64.so"
          # that is being unpacked to runtime libs.
          #
          # Since the jar is nothing more than a zip archive, extracting library
          # from "skiko-awt-runtime-linux-x64" modifies it's timestamps
          # with current time, which in changes it's hash, which in turn
          # makes the whole build unreproducible.
          #
          # It seems to be there is no way to handle this extraction in our code and
          # https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
          # unfortunately doesn't solve the issue.
          #
          # Instead, just modify the deb, removing the redundant skiko library.
          # 
          # Also, it seems this is related to:
          # https://youtrack.jetbrains.com/issue/CMP-1971/createDistributable-produces-duplicated-skiko-awt.jar-and-skiko-awt-runtime-windows-x64.jar
          # 
          export SOURCE_DATE_EPOCH=1704067200

          dpkg-deb -R ./release/main/deb/simplex*.deb ./extracted

          rm -f ./extracted/opt/*imple*/lib/app/*skiko-awt-runtime-linux*
          sed -i -e '/skiko-awt-runtime-linux/d' ./extracted/opt/*imple*/lib/app/simplex.cfg
          find ./extracted/ -exec touch -d "@$SOURCE_DATE_EPOCH" {} +

          dpkg-deb --build --root-owner-group --uniform-compression ./extracted ./release/main/deb/simplex_amd64.deb

          strip-nondeterminism ./release/main/deb/simplex_amd64.deb

      - name: Prepare Desktop
        id: linux_desktop_build
        if: startsWith(github.ref, 'refs/tags/v') && matrix.should_run == true
        shell: bash
        run: |
          path=$(echo ${{ github.workspace }}/apps/multiplatform/release/main/deb/simplex_amd64.deb )
          echo "package_path=$path" >> $GITHUB_OUTPUT
          echo "package_hash=$(echo SHA2-256\(${{ matrix.desktop_asset_name }}\)= $(openssl sha256 $path | cut -d' ' -f 2))" >> $GITHUB_OUTPUT

      - name: Upload Desktop
        uses: ./.github/actions/prepare-release
        if: startsWith(github.ref, 'refs/tags/v') && matrix.should_run == true
        with:
          bin_path: ${{ steps.linux_desktop_build.outputs.package_path }}
          bin_name: ${{ matrix.desktop_asset_name }}
          bin_hash: ${{ steps.linux_desktop_build.outputs.package_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build AppImage
        if: startsWith(github.ref, 'refs/tags/v') && matrix.os == '22.04' && matrix.should_run == true
        shell: docker exec -t builder sh -eu {0}
        run: |
          scripts/desktop/make-appimage-linux.sh

      - name: Prepare AppImage
        id: linux_appimage_build
        if: startsWith(github.ref, 'refs/tags/v') && matrix.os == '22.04' && matrix.should_run == true
        shell: bash
        run: |
          path=$(echo ${{ github.workspace }}/apps/multiplatform/release/main/*imple*.AppImage)
          echo "appimage_path=$path" >> $GITHUB_OUTPUT
          echo "appimage_hash=$(echo SHA2-256\(simplex-desktop-x86_64.AppImage\)= $(openssl sha256 $path | cut -d' ' -f 2))" >> $GITHUB_OUTPUT

      - name: Upload AppImage
        if: startsWith(github.ref, 'refs/tags/v') && matrix.os == '22.04' && matrix.should_run == true
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.linux_appimage_build.outputs.appimage_path }}
          bin_name: "simplex-desktop-x86_64.AppImage"
          bin_hash: ${{ steps.linux_appimage_build.outputs.appimage_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix permissions for cache
        if: matrix.should_run == true
        shell: bash
        run: |
          sudo chmod -R 777 dist-newstyle ~/.cabal
          sudo chown -R $(id -u):$(id -g) dist-newstyle ~/.cabal

      - name: Run tests
        if: matrix.should_run == true
        timeout-minutes: 120
        shell: bash
        run: |
          i=1
          attempts=1
          ${{ (github.ref == 'refs/heads/stable' || startsWith(github.ref, 'refs/tags/v')) }} && attempts=3
          while [ "$i" -le "$attempts" ]; do
            if ./simplex-chat-test; then
              break
            else
              echo "Attempt $i failed, retrying..."
              i=$((i + 1))
              sleep 1
            fi
          done
          if [ "$i" -gt "$attempts" ]; then
            echo "All "$attempts" attempts failed."
            exit 1
          fi
