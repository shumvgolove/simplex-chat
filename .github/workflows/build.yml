name: build

on:
  push:
    branches:
      - master
      - stable
    tags:
      - "v*"
      - "!*-fdroid"
      - "!*-armv7a"
  pull_request:
    paths-ignore:
      - "apps/ios"
      - "apps/multiplatform"
      - "blog"
      - "docs"
      - "fastlane"
      - "images"
      - "packages"
      - "website"
      - "README.md"
      - "PRIVACY.md"

jobs:
  variables:
    runs-on: ubuntu-latest
    outputs:
      GHC_VER: 9.6.3
      JAVA_VER: 17
    steps:
      - name: Dummy job when we have just simple variables
        if: false
        run: echo

  prepare-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Clone project
        uses: actions/checkout@v3

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: .github/changelog_conf.json
          failOnError: true
          ignorePreReleases: true
          commitMode: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          prerelease: true
          files: |
            LICENSE
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux-cli:
    name: "ubuntu-${{ matrix.os }} CLI, GHC: ${{ matrix.ghc }}"
    if: always()
    needs: [prepare-release, variables]
    runs-on: ubuntu-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 20.04
            ghc: "8.10.7"
          - os: 20.04
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            cli_asset_name: simplex-chat-ubuntu-20_04-x86-64
          - os: 22.04
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            cli_asset_name: simplex-chat-ubuntu-22_04-x86-64
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Prepare build
        uses: ./.github/actions/prepare-build
        with:
          java_ver: ${{ needs.variables.outputs.JAVA_VER }}
          ghc_ver: ${{ matrix.ghc }}
          os: ubuntu-${{ matrix.os }}
          github_ref: ${{ github.ref }}
          skip_install: true

      # Ubuntu 20.04 with GHC 8.10.7 OOM
      - uses: actionhippie/swap-space@v1
        with:
          size: 16G

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          file: Dockerfile.build
          tags: build/${{ matrix.os }}:latest
          build-args: |
            TAG=${{ matrix.os }}
            GHC=${{ matrix.ghc }}

      - name: Start container
        shell: bash
        run: |
          docker run -t -d \
            --name builder \
            -v ~/.cabal:/root/.cabal \
            -v /home/runner/work/_temp:/home/runner/work/_temp \
            -v ${{ github.workspace }}:/project \
            build/${{ matrix.os }}:latest

      - name: Prepare cabal.project.local
        shell: bash
        run: |
          echo "ignore-project: False"    >> cabal.project.local
          echo "package direct-sqlcipher" >> cabal.project.local
          echo "    flags: +openssl"      >> cabal.project.local

      - name: Build CLI
        shell: docker exec -t builder sh {0}
        run: |
          cabal update
          cabal build --jobs=$(nproc) --enable-tests
          mkdir -p /out
          for i in simplex-chat simplex-chat-test; do
            bin=$(find /project/dist-newstyle -name "$i" -type f -executable)
            chmod +x "$bin"
            mv "$bin" /out/
          done
          strip /out/simplex-chat

      - name: Copy tests from container
        shell: bash
        run: |
          docker cp builder:/out/simplex-chat-test .

      - name: Copy CLI from container and prepare it
        id: linux_cli_prepare
        if: startsWith(github.ref, 'refs/tags/v') && matrix.cli_asset_name
        shell: bash
        run: |
          docker cp builder:/out/simplex-chat ./${{ matrix.cli_asset_name }}
          bin_path="${{ github.workspace }}/${{ matrix.cli_asset_name }}"
          echo "bin_path=$bin_path" >> $GITHUB_OUTPUT
          echo "bin_hash=$(echo SHA2-512\(${{ matrix.cli_asset_name }}\)= $(sha512sum $bin_path | awk '{print $1}'))" >> $GITHUB_OUTPUT

      - name: Upload CLI
        if: startsWith(github.ref, 'refs/tags/v') && matrix.cli_asset_name
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.linux_cli_prepare.outputs.bin_path }}
          bin_name: ${{ matrix.cli_asset_name }}
          bin_hash: ${{ steps.linux_cli_prepare.outputs.bin_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        shell: bash
        run: |
          ./simplex-chat-test

  build-linux-desktop:
    name: "${{ matrix.os }} Desktop, GHC: ${{ matrix.ghc }}"
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [prepare-release, variables]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            desktop_asset_name: simplex-desktop-ubuntu-20_04-x86_64.deb
          - os: ubuntu-22.04
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            desktop_asset_name: simplex-desktop-ubuntu-22_04-x86_64.deb
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Prepare build
        uses: ./.github/actions/prepare-build
        with:
          java_ver: ${{ needs.variables.outputs.JAVA_VER }}
          ghc_ver: ${{ matrix.ghc }}
          os: ${{ matrix.os }}
          github_ref: ${{ github.ref }}

      - name: Install AppImage dependencies
        run: sudo apt install -y desktop-file-utils

      - name: Prepare cabal.project.local
        shell: bash
        run: |
          echo "ignore-project: False"    >> cabal.project.local
          echo "package direct-sqlcipher" >> cabal.project.local
          echo "    flags: +openssl"      >> cabal.project.local

      - name: Build Desktop
        id: linux_desktop_build
        shell: bash
        run: |
          scripts/desktop/build-lib-linux.sh
          cd apps/multiplatform
          ./gradlew packageDeb
          path=$(echo $PWD/release/main/deb/simplex_*_amd64.deb)
          echo "package_path=$path" >> $GITHUB_OUTPUT
          echo "package_hash=$(echo SHA2-512\(${{ matrix.desktop_asset_name }}\)= $(sha512sum $path | awk '{print $1}'))" >> $GITHUB_OUTPUT

      - name: Upload Desktop
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.linux_desktop_build.outputs.package_path }}
          bin_name: ${{ matrix.desktop_asset_name }}
          bin_hash: ${{ steps.linux_desktop_build.outputs.package_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build AppImage
        id: linux_appimage_build
        if: matrix.os == 'ubuntu-20.04'
        shell: bash
        run: |
          scripts/desktop/make-appimage-linux.sh
          path=$(echo $PWD/apps/multiplatform/release/main/*imple*.AppImage)
          echo "appimage_path=$path" >> $GITHUB_OUTPUT
          echo "appimage_hash=$(echo SHA2-512\(simplex-desktop-x86_64.AppImage\)= $(sha512sum $path | awk '{print $1}'))" >> $GITHUB_OUTPUT

      - name: Upload AppImage
        if: matrix.os == 'ubuntu-20.04'
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.linux_appimage_build.outputs.appimage_path }}
          bin_name: "simplex-desktop-x86_64.AppImage"
          bin_hash: ${{ steps.linux_appimage_build.outputs.appimage_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: "${{ matrix.os }} (CLI,Desktop), GHC: ${{ matrix.ghc }}"
    if: always()
    needs: [prepare-release, variables]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            cli_asset_name: simplex-chat-macos-aarch64
            desktop_asset_name: simplex-desktop-macos-aarch64.dmg
            openssl_dir: "/opt/homebrew/opt"
          - os: macos-13
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            cli_asset_name: simplex-chat-macos-x86-64
            desktop_asset_name: simplex-desktop-macos-x86_64.dmg
            openssl_dir: "/usr/local/opt"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Prepare build
        uses: ./.github/actions/prepare-build
        with:
          java_ver: ${{ needs.variables.outputs.JAVA_VER }}
          ghc_ver: ${{ matrix.ghc }}
          os: ${{ matrix.os }}
          github_ref: ${{ github.ref }}

      - name: Install OpenSSL and sha2
        run: brew install openssl@3.0 sha2

      - name: Prepare cabal.project.local
        shell: bash
        run: |
          echo "ignore-project: False"                                                    >> cabal.project.local
          echo "package simplexmq"                                                        >> cabal.project.local
          echo "    extra-include-dirs: ${{ matrix.opnessl_dir }}/openssl@3.0/include"    >> cabal.project.local
          echo "    extra-lib-dirs: ${{ matrix.openssl_dir}}/openssl@3.0/lib"             >> cabal.project.local
          echo ""                                                                         >> cabal.project.local
          echo "package direct-sqlcipher"                                                 >> cabal.project.local
          echo "    extra-include-dirs: ${{ matrix.openssl_dir }}/openssl@3.0/include"    >> cabal.project.local
          echo "    extra-lib-dirs: ${{ matrix.openssl_dir }}/openssl@3.0/lib"            >> cabal.project.local
          echo "    flags: +openssl"                                                      >> cabal.project.local

      - name: Build CLI
        id: mac_cli_build
        shell: bash
        run: |
          cabal build --enable-tests
          path=$(cabal list-bin simplex-chat)
          echo "bin_path=$path" >> $GITHUB_OUTPUT
          echo "bin_hash=$(echo SHA2-512\(${{ matrix.cli_asset_name }}\)= $(sha512sum $path | awk '{print $1}'))" >> $GITHUB_OUTPUT

      - name: Upload CLI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.mac_cli_build.outputs.bin_path }}
          bin_name: ${{ matrix.cli_asset_name }}
          bin_hash: ${{ steps.mac_cli_build.outputs.bin_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Desktop
        id: mac_desktop_build
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        env:
          APPLE_SIMPLEX_SIGNING_KEYCHAIN: ${{ secrets.APPLE_SIMPLEX_SIGNING_KEYCHAIN }}
          APPLE_SIMPLEX_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_SIMPLEX_NOTARIZATION_APPLE_ID }}
          APPLE_SIMPLEX_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_SIMPLEX_NOTARIZATION_PASSWORD }}
        run: |
          scripts/ci/build-desktop-mac.sh
          path=$(echo $PWD/apps/multiplatform/release/main/dmg/SimpleX-*.dmg)
          echo "package_path=$path" >> $GITHUB_OUTPUT
          echo "package_hash=$(echo SHA2-512\(${{ matrix.desktop_asset_name }}\)= $(sha512sum $path | awk '{print $1}'))" >> $GITHUB_OUTPUT

      - name: Upload Desktop
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.mac_desktop_build.outputs.package_path }}
          bin_name: ${{ matrix.cli_asset_name }}
          bin_hash: ${{ steps.mac_desktop_build.outputs.package_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        timeout-minutes: 40
        shell: bash
        run: cabal test --test-show-details=direct

  build-windows:
    name: "${{ matrix.os }} (CLI,Desktop), GHC: ${{ matrix.ghc }}"
    if: always()
    needs: [prepare-release, variables]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            ghc: ${{ needs.variables.outputs.GHC_VER }}
            cli_asset_name: simplex-chat-windows-x86-64
            desktop_asset_name: simplex-desktop-windows-x86_64.msi
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Prepare build
        uses: ./.github/actions/prepare-build
        with:
          java_ver: ${{ needs.variables.outputs.JAVA_VER }}
          ghc_ver: ${{ matrix.ghc }}
          os: ${{ matrix.os }}
          cache_path: "C:/cabal"
          github_ref: ${{ github.ref }}

      - name: Configure pagefile (Windows)
        uses: al-cheb/configure-pagefile-action@v1.4
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"
  
      - name: 'Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            git
            perl
            make
          pacboy: >-
            toolchain:p
            cmake:p

      - name: Build CLI
        id: windows_cli_build
        shell: msys2 {0}
        run: |
          export PATH=$PATH:/c/ghcup/bin:$(echo /c/tools/ghc-*/bin || echo)
          scripts/desktop/prepare-openssl-windows.sh
          openssl_windows_style_path=$(echo `pwd`/dist-newstyle/openssl-3.0.15 | sed 's#/\([a-zA-Z]\)#\1:#' | sed 's#/#\\#g')
          rm cabal.project.local 2>/dev/null || true
          echo "ignore-project: False" >> cabal.project.local
          echo "package direct-sqlcipher" >> cabal.project.local
          echo "    flags: +openssl" >> cabal.project.local
          echo "    extra-include-dirs: $openssl_windows_style_path\include" >> cabal.project.local
          echo "    extra-lib-dirs: $openssl_windows_style_path" >> cabal.project.local

          rm -rf dist-newstyle/src/direct-sq*
          sed -i "s/, unix /--, unix /" simplex-chat.cabal
          cabal build --enable-tests
          rm -rf dist-newstyle/src/direct-sq*
          path=$(cabal list-bin simplex-chat | tail -n 1)
          echo "bin_path=$path" >> $GITHUB_OUTPUT
          echo "bin_hash=$(echo SHA2-512\(${{ matrix.cli_asset_name }}\)= $(sha512sum $path | awk '{print $1}'))" >> $GITHUB_OUTPUT

      - name: Upload CLI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.windows_cli_build.outputs.bin_path }}
          bin_name: ${{ matrix.cli_asset_name }}
          bin_hash: ${{ steps.windows_cli_build.outputs.bin_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Desktop
        id: windows_desktop_build
        if: startsWith(github.ref, 'refs/tags/v')
        shell: msys2 {0}
        run: |
          export PATH=$PATH:/c/ghcup/bin:$(echo /c/tools/ghc-*/bin || echo)
          scripts/desktop/build-lib-windows.sh
          cd apps/multiplatform
          ./gradlew packageMsi
          path=$(echo $PWD/release/main/msi/*imple*.msi | sed 's#/\([a-z]\)#\1:#' | sed 's#/#\\#g')
          echo "package_path=$path" >> $GITHUB_OUTPUT
          echo "package_hash=$(echo SHA2-512\(${{ matrix.desktop_asset_name }}\)= $(sha512sum $path | awk '{print $1}'))" >> $GITHUB_OUTPUT

      - name: Upload Desktop
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ./.github/actions/prepare-release
        with:
          bin_path: ${{ steps.windows_desktop_build.outputs.package_path }}
          bin_name: ${{ matrix.desktop_asset_name }}
          bin_hash: ${{ steps.windows_desktop_build.outputs.package_hash }}
          github_ref: ${{ github.ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
